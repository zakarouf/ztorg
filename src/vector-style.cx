
#if 0
#include "zse/zse_all/zse_all.h"

#undef KEY_END
#undef KEY_HOME
#undef KEY_LEFT
#undef KEY_UP
#undef KEY_DOWN
#undef KEY_RIGHT
#undef KEY_BACKSPACE
#undef KEY_ENTER

#include <stdlib.h>
#include <z_/types/record.h>
#include <SDL/SDL.h>


z__u32 WINDOW_X = 608;
z__u32 WINDOW_Y = 480;

#define W WINDOW_X
#define H WINDOW_Y

#define EyeHeight  6    // Camera height from floor when standing
#define DuckHeight 2.5  // And when crouching
#define HeadMargin 1    // How much room there is above camera before the head hits the ceiling
#define KneeHeight 2    // How tall obstacles the player can simply walk over without jumping
#define hfov (0.73f*H)  // Affects the horizontal field of vision
#define vfov (.2f*H)    // Affects the vertical field of vision

typedef
    z__Record(
        Sector,
            (z__f32, floor, ceiling),
            (z__Vector2, *vertex),
            (z__i8, *neighbours),
            (z__u32, npoints)
) Sector;

typedef z__Arr(Sector) Sector_Array;

/* Player: location */
typedef struct Player
{
    z__Vector3   pos,      // Current position
                 velocity;   // Current motion vector
    float angle, anglesin, anglecos, yaw;   // Looking towards (and sin() and cos() thereof)
    unsigned sector;                        // Which sector the player is currently in
} Player;

// Utility functions. Because C doesn't have templates,
// we use the slightly less safe preprocessor macros to
// implement these functions that work with multiple types.
#define z__min(a,b)             (((a) < (b)) ? (a) : (b)) // min: Choose smaller of two scalars.
#define z__max(a,b)             (((a) > (b)) ? (a) : (b)) // max: Choose greater of two scalars.
#define z__num_clamp(a, mi,ma)      z__min(z__max(a,mi),ma)         // clamp: Clamp value into set range.
#define vxs(x0,y0, x1,y1)    ((x0)*(y1) - (x1)*(y0))   // vxs: Vector cross product
// Overlap:  Determine whether the two number ranges overlap.
#define Overlap(a0,a1,b0,b1) (z__min(a0,a1) <= z__max(b0,b1) && z__min(b0,b1) <= z__max(a0,a1))
// IntersectBox: Determine whether two 2D-boxes intersect.
#define IntersectBox(x0,y0, x1,y1, x2,y2, x3,y3) (Overlap(x0,x1,x2,x3) && Overlap(y0,y1,y2,y3))
// PointSide: Determine which side of a line the point is on. Return value: <0, =0 or >0.
#define PointSide(px,py, x0,y0, x1,y1) vxs((x1)-(x0), (y1)-(y0), (px)-(x0), (py)-(y0))
// Intersect: Calculate the point of intersection between two lines.
#define Intersect(x1,y1, x2,y2, x3,y3, x4,y4) ((z__Vector2) { \
    vxs(vxs(x1,y1, x2,y2), (x1)-(x2), vxs(x3,y3, x4,y4), (x3)-(x4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)), \
    vxs(vxs(x1,y1, x2,y2), (y1)-(y2), vxs(x3,y3, x4,y4), (y3)-(y4)) / vxs((x1)-(x2), (y1)-(y2), (x3)-(x4), (y3)-(y4)) })



static SDL_Surface* surface = NULL;


static Sector_Array data_load(Player *player)
{
    FILE* fp = fopen("map-clear.txt", "rt");
    if(!fp) { perror("map-clear.txt"); exit(1); }
    char Buf[256], word[256], *ptr;
    z__Vector2 *vert = NULL, v;
    int n, m, NumVertices = 0;
    Sector_Array sectors;
    z__Arr_new(&sectors, 8);

    while(fgets(Buf, sizeof Buf, fp))
        switch(sscanf(ptr = Buf, "%32s%n", word, &n) == 1 ? word[0] : '\0')
        {
            case 'v': // vertex
                for(sscanf(ptr += n, "%f%n", &v.y, &n); sscanf(ptr += n, "%f%n", &v.x, &n) == 1; )
                    { vert = realloc(vert, ++NumVertices * sizeof(*vert)); vert[NumVertices-1] = v; }
                break;
            case 's': // sector
                z__Arr_push(&sectors, (Sector){0});
                Sector *sect = &z__Arr_getTop(sectors);
                int* num = NULL;
                sscanf(ptr += n, "%f%f%n", &sect->floor,&sect->ceiling, &n);
                for(m=0; sscanf(ptr += n, "%32s%n", word, &n) == 1 && word[0] != '#'; )
                    { num = z__REALLOC(num, ++m * sizeof(*num)); num[m-1] = word[0]=='x' ? -1 : atoi(word); }
                sect->npoints   = m /= 2;
                sect->neighbours = z__MALLOC( (m  ) * sizeof(*sect->neighbours) );
                sect->vertex    = z__MALLOC( (m+1) * sizeof(*sect->vertex)    );
                for(n=0; n<m; ++n) sect->neighbours[n] = num[m + n];
                for(n=0; n<m; ++n) sect->vertex[n+1]  = vert[num[n]]; // TODO: Range checking
                sect->vertex[0] = sect->vertex[m]; // Ensure the vertexes form a loop
                free(num);
                break;
            case 'p':; // player
                float angle;
                sscanf(ptr += n, "%f %f %f %d", &v.x, &v.y, &angle,&n);
                *player = (struct Player) { {v.x, v.y, 0}, {0,0,0}, angle,0,0,0, n }; // TODO: Range checking
                player->pos.z = z__Arr_getVal(sectors, player->sector).floor + EyeHeight;
        }
    fclose(fp);
    free(vert);

    return sectors;
}

static void data_delete(Sector_Array sectors)
{
    z__Arr_foreach(z__auto sect, sectors){
        free(sect->vertex);
        free(sect->neighbours);
    }
    z__Arr_delete(&sectors);
}
/*
static void draw_vline(int x, int y1,int y2, int top,int middle,int bottom)
{
    y1 = z__num_clamp(y1, 0, WINDOW_Y-1);
    y2 = z__num_clamp(y2, 0, WINDOW_Y-1);
    if(y2 == y1)
        pix[y1*W+x] = middle;
    else if(y2 > y1)
    {
        pix[y1*W+x] = top;
        for(int y=y1+1; y<y2; ++y) pix[y*W+x] = middle;
        pix[y2*W+x] = bottom;
    }
}
*/

static void MovePlayer(Player *player, const Sector_Array sectors, z__Vector2 d)
{
    z__Vector3 p = player->pos;
    /* Check if this movement crosses one of this sector's edges
     * that have a neighboring sector on the other side.
     * Because the edge vertices of each sector are defined in
     * clockwise order, PointSide will always return -1 for a point
     * that is outside the sector and 0 or 1 for a point that is inside.
     */
    const Sector * const sect = &z__Arr_getVal((sectors), player->sector);
    const z__Vector2 * const vert = sect->vertex;
    for(unsigned s = 0; s < sect->npoints; ++s)
        if(sect->neighbours[s] >= 0
        && IntersectBox(p.x,p.y, p.x+d.x,p.y+d.y, vert[s+0].x, vert[s+0].y, vert[s+1].x, vert[s+1].y)
        && PointSide(p.x+d.x, p.y+d.y, vert[s+0].x, vert[s+0].y, vert[s+1].x, vert[s+1].y) < 0)
        {
            player->sector = sect->neighbours[s];
            break;
        }

    player->pos.x += d.x;
    player->pos.y += d.y;
    player->anglesin = sinf(player->angle);
    player->anglecos = cosf(player->angle);
}

/* vline: Draw a vertical line on screen, with a different color pixel in top & bottom */
static void draw_vline(int x, int y1,int y2, int top,int middle,int bottom)
{
    int *pix = (int*) surface->pixels;
    y1 = z__num_clamp(y1, 0, H-1);
    y2 = z__num_clamp(y2, 0, H-1);
    if(y2 == y1)
        pix[y1*W+x] = middle;
    else if(y2 > y1)
    {
        pix[y1*W+x] = top;
        for(int y=y1+1; y<y2; ++y) pix[y*W+x] = middle;
        pix[y2*W+x] = bottom;
    }
}

z__i32Arr ytop, ybottom, renderedsectors;

void render_start(Sector_Array const * const sectors)
{
    z__Arr_new(&ytop, W);
    z__Arr_new(&ybottom, W);
    z__Arr_new(&renderedsectors, z__Arr_getUsed((*sectors)));
}

void render_close(void)
{
    z__Arr_delete(&ytop);
    z__Arr_delete(&ybottom);
    z__Arr_delete(&renderedsectors);
}

void render_main(Player *player, Sector_Array const * const sectors)
{
    enum { MaxQueue = 32 };  // maximum number of pending portal renders
    struct item { int sectorno,sx1,sx2; } queue[MaxQueue], *head=queue, *tail=queue;
//    int ytop[W]
//      , ybottom[W]
//      , renderedsectors[z__Arr_getUsed((*sectors))];

    if(z__Arr_getUsed(ytop) == W){
        z__Arr_resize(&ytop, W);
    }
    if(z__Arr_getUsed(ybottom) == W){
        z__Arr_resize(&ybottom, W);
    }
    if(z__Arr_getUsed(renderedsectors) == z__Arr_getUsed((*sectors))){
        z__Arr_resize(&renderedsectors, z__Arr_getUsed((*sectors)));
    }

    z__Arr_mapnum(&ytop);
    z__Arr_mapnum(&ybottom);
    z__Arr_mapnum(&renderedsectors);

    for(unsigned x=0; x < W; ++x) ybottom.data[x] = H-1;
    for(unsigned n=0; n < z__Arr_getUsed((*sectors)); ++n) renderedsectors.data[n] = 0;

    /* Begin whole-screen rendering from where the player is. */
    *head = (struct item) { player->sector, 0, W - 1 };
    if(++head == queue+MaxQueue) head = queue;

    do {
    /* Pick a sector & slice from the queue to draw */
    const struct item now = *tail;
    if(++tail == queue+MaxQueue) tail = queue;

    if(renderedsectors.data[now.sectorno] & 0x21) continue; // Odd = still rendering, 0x20 = give up
    ++renderedsectors.data[now.sectorno];
    const Sector* const sect = &z__Arr_getVal((*sectors), now.sectorno);
    /* Render each wall of this sector that is facing towards player. */
    for(unsigned s = 0; s < sect->npoints; ++s)
    {
        /* Acquire the x,y coordinates of the two endpoints (vertices) of this edge of the sector */
        float vx1 = sect->vertex[s+0].x - player->pos.x, vy1 = sect->vertex[s+0].y - player->pos.y;
        float vx2 = sect->vertex[s+1].x - player->pos.x, vy2 = sect->vertex[s+1].y - player->pos.y;
        /* Rotate them around the player's view */
        float pcos = player->anglecos
            , psin = player->anglesin;

        float tx1 = vx1 * psin - vy1 * pcos,  tz1 = vx1 * pcos + vy1 * psin;
        float tx2 = vx2 * psin - vy2 * pcos,  tz2 = vx2 * pcos + vy2 * psin;
        /* Is the wall at least partially in front of the player? */
        if(tz1 <= 0 && tz2 <= 0) continue;
        /* If it's partially behind the player, clip it against player's view frustrum */
        if(tz1 <= 0 || tz2 <= 0)
        {
            float nearz = 1e-4f, farz = 5, nearside = 1e-5f, farside = 20.f;
            // Find an intersection between the wall and the approximate edges of player's view
            z__Vector2 i1 = Intersect(tx1,tz1,tx2,tz2, -nearside,nearz, -farside,farz);
            z__Vector2 i2 = Intersect(tx1,tz1,tx2,tz2,  nearside,nearz,  farside,farz);
            if(tz1 < nearz) { if(i1.y > 0) { tx1 = i1.x; tz1 = i1.y; } else { tx1 = i2.x; tz1 = i2.y; } }
            if(tz2 < nearz) { if(i1.y > 0) { tx2 = i1.x; tz2 = i1.y; } else { tx2 = i2.x; tz2 = i2.y; } }
        }
        /* Do perspective transformation */
        float xscale1 = hfov / tz1, yscale1 = vfov / tz1;    int x1 = W/2 - (int)(tx1 * xscale1);
        float xscale2 = hfov / tz2, yscale2 = vfov / tz2;    int x2 = W/2 - (int)(tx2 * xscale2);
        if(x1 >= x2 || x2 < now.sx1 || x1 > now.sx2) continue; // Only render if it's visible
        /* Acquire the floor and ceiling heights, relative to where the player's view is */
        float yceil  = sect->ceiling  - player->pos.z;
        float yfloor = sect->floor - player->pos.z;
        /* Check the edge type. neighbor=-1 means wall, other=boundary between two sectors. */
        int neighbour = sect->neighbours[s];
        float nyceil=0, nyfloor=0;
        if(neighbour >= 0) // Is another sector showing through this portal?
        {
            nyceil  = z__Arr_getVal((*sectors), neighbour).ceiling  - player->pos.z;
            nyfloor = z__Arr_getVal((*sectors), neighbour).floor - player->pos.z;
        }
        /* Project our ceiling & floor heights into screen coordinates (Y coordinate) */
        #define Yaw(y,z) (y + (z*player->yaw))
        int y1a  = H/2 - (int)(Yaw(yceil, tz1) * yscale1),  y1b = H/2 - (int)(Yaw(yfloor, tz1) * yscale1);
        int y2a  = H/2 - (int)(Yaw(yceil, tz2) * yscale2),  y2b = H/2 - (int)(Yaw(yfloor, tz2) * yscale2);
        /* The same for the neighboring sector */
        int ny1a = H/2 - (int)(Yaw(nyceil, tz1) * yscale1), ny1b = H/2 - (int)(Yaw(nyfloor, tz1) * yscale1);
        int ny2a = H/2 - (int)(Yaw(nyceil, tz2) * yscale2), ny2b = H/2 - (int)(Yaw(nyfloor, tz2) * yscale2);

        /* Render the wall. */
        int beginx = z__max(x1, now.sx1), endx = z__min(x2, now.sx2);
        for(int x = beginx; x <= endx; ++x)
        {
            /* Calculate the Z coordinate for this point. (Only used for lighting.) */
            int z = ((x - x1) * (tz2-tz1) / (x2-x1) + tz1) * 8;
            /* Acquire the Y coordinates for our ceiling & floor for this X coordinate. Clamp them. */
            int ya = (x - x1) * (y2a-y1a) / (x2-x1) + y1a, cya = z__num_clamp(ya, ytop.data[x],ybottom.data[x]); // top
            int yb = (x - x1) * (y2b-y1b) / (x2-x1) + y1b, cyb = z__num_clamp(yb, ytop.data[x],ybottom.data[x]); // bottom

            /* Render ceiling: everything above this sector's ceiling height. */
            draw_vline(x, ytop.data[x], cya-1, 0x111111 ,0x222222,0x111111);
            /* Render floor: everything below this sector's floor height. */
            draw_vline(x, cyb+1, ybottom.data[x], 0x0000FF,0x0000AA,0x0000FF);

            /* Is there another sector behind this edge? */
            if(neighbour >= 0)
            {
                /* Same for _their_ floor and ceiling */
                int nya = (x - x1) * (ny2a-ny1a) / (x2-x1) + ny1a, cnya = z__num_clamp(nya, ytop.data[x],ybottom.data[x]);
                int nyb = (x - x1) * (ny2b-ny1b) / (x2-x1) + ny1b, cnyb = z__num_clamp(nyb, ytop.data[x],ybottom.data[x]);
                /* If our ceiling is higher than their ceiling, render upper wall */
                unsigned r1 = 0x010101 * (255-z), r2 = 0x040007 * (31-z/8);
                draw_vline(x, cya, cnya-1, 0, x==x1||x==x2 ? 0 : r1, 0); // Between our and their ceiling
                ytop.data[x] = z__num_clamp(z__max(cya, cnya), ytop.data[x], H-1);   // Shrink the remaining window below these ceilings
                /* If our floor is lower than their floor, render bottom wall */
                draw_vline(x, cnyb+1, cyb, 0, x==x1||x==x2 ? 0 : r2, 0); // Between their and our floor
                ybottom.data[x] = z__num_clamp(z__min(cyb, cnyb), 0, ybottom.data[x]); // Shrink the remaining window above these floors
            }
            else
            {
                /* There's no neighbor. Render wall from top (cya = ceiling level) to bottom (cyb = floor level). */
                unsigned r = 0x010101 * (255-z);
                draw_vline(x, cya, cyb, 0, x==x1||x==x2 ? 0 : r, 0);
            }
        }
        /* Schedule the neighboring sector for rendering within the window formed by this wall. */
        if(neighbour >= 0 && endx >= beginx && (head + MaxQueue+1-tail)%MaxQueue)
        {
            *head = (struct item) { neighbour, beginx, endx };
            if(++head == queue+MaxQueue) head = queue;
        }
    } // for s in sector's edges
    ++renderedsectors.data[now.sectorno];
    } while(head != tail); // render any other queued sectors
}


void main_loop(Player player, Sector_Array *sectors)
{
    int wsad[4]={0,0,0,0}, ground=0, falling=1, moving=0, ducking=0;
    float yaw = 0;
    while(true){

        /*
         * Draw Stuff
         **/
       
        SDL_LockSurface(surface);
        render_main(&player, sectors);
        SDL_UnlockSurface(surface);
        SDL_Flip(surface);

        /* Vertical collision detection */
        float eyeheight = ducking ? DuckHeight : EyeHeight;
        ground = !falling;
        if(falling)
        {
            player.velocity.z -= 0.05f; /* Add gravity */
            float nextz = player.pos.z + player.velocity.z;
            z__auto const p_sector = &z__Arr_getVal((*sectors), player.sector);
            if(player.velocity.z < 0 && nextz  < p_sector->floor + eyeheight) // When going down
            {
                /* Fix to ground */
                player.pos.z    = p_sector->floor + eyeheight;
                player.velocity.z = 0;
                falling = 0;
                ground  = 1;
            }
            else if(player.velocity.z > 0 && nextz > p_sector->ceiling) // When going up
            {
                /* Prevent jumping above ceiling */
                player.velocity.z = 0;
                falling = 1;
            }
            if(falling)
            {
                player.pos.z += player.velocity.z;
                moving = 1;
            }
        }
        /* Horizontal collision detection */
        if(moving)
        {
            float px = player.pos.x,    py = player.pos.y;
            float dx = player.velocity.x, dy = player.velocity.y;

            const Sector* const sect = &z__Arr_getVal((*sectors), player.sector);
            const z__Vector2* const vert = sect->vertex;
            /* Check if the player is about to cross one of the sector's edges */
            for(unsigned s = 0; s < sect->npoints; ++s)
                if(IntersectBox(px,py, px+dx,py+dy, vert[s+0].x, vert[s+0].y, vert[s+1].x, vert[s+1].y)
                && PointSide(px+dx, py+dy, vert[s+0].x, vert[s+0].y, vert[s+1].x, vert[s+1].y) < 0)
                {
                    /* Check where the hole is. */
                    float hole_low  = sect->neighbours[s] < 0 ?  9e9 : z__max(sect->floor, z__Arr_getVal((*sectors), sect->neighbours[s]).floor);
                    float hole_high = sect->neighbours[s] < 0 ? -9e9 : z__min(sect->ceiling, z__Arr_getVal((*sectors), sect->neighbours[s]).ceiling);
                    /* Check whether we're bumping into a wall. */
                    if(hole_high < player.pos.z+HeadMargin
                    || hole_low  > player.pos.z-eyeheight+KneeHeight)
                    {
                        /* Bumps into a wall! Slide along the wall. */
                        /* This formula is from Wikipedia article "vector projection". */
                        float xd = vert[s+1].x - vert[s+0].x, yd = vert[s+1].y - vert[s+0].y;
                        dx = xd * (dx*xd + yd*dy) / (xd*xd + yd*yd);
                        dy = yd * (dx*xd + yd*dy) / (xd*xd + yd*yd);
                        moving = 0;
                    }
                }
            MovePlayer(&player, *sectors, (z__Vector2){dx, dy});
            falling = 1;
        }

        SDL_Event ev;
        while(SDL_PollEvent(&ev))
            switch(ev.type)
            {
                case SDL_KEYDOWN:
                case SDL_KEYUP:
                    switch(ev.key.keysym.sym)
                    {
                        case 'w': wsad[0] = ev.type==SDL_KEYDOWN; break;
                        case 's': wsad[1] = ev.type==SDL_KEYDOWN; break;
                        case 'a': wsad[2] = ev.type==SDL_KEYDOWN; break;
                        case 'd': wsad[3] = ev.type==SDL_KEYDOWN; break;
                        case 'q': return;
                        case ' ': /* jump */
                            if(ground) { player.velocity.z += 0.5; falling = 1; }
                            break;
                        case SDLK_LCTRL: /* duck */
                        case SDLK_RCTRL: ducking = ev.type==SDL_KEYDOWN; falling=1; break;
                        default: break;
                    }
                    break;
                case SDL_QUIT: return;
            }

        /* mouse aiming */
        int x,y;
        SDL_GetRelativeMouseState(&x,&y);
        player.angle += x * 0.03f;
        yaw          = z__num_clamp(yaw - y*0.05f, -5, 5);
        player.yaw   = yaw - player.velocity.z*0.5f;
        MovePlayer(&player, *sectors, (z__Vector2){0, 0});

        float move_vec[2] = {0.f, 0.f};
        if(wsad[0]) { move_vec[0] += player.anglecos*0.2f; move_vec[1] += player.anglesin*0.2f; }
        if(wsad[1]) { move_vec[0] -= player.anglecos*0.2f; move_vec[1] -= player.anglesin*0.2f; }
        if(wsad[2]) { move_vec[0] += player.anglesin*0.2f; move_vec[1] -= player.anglecos*0.2f; }
        if(wsad[3]) { move_vec[0] -= player.anglesin*0.2f; move_vec[1] += player.anglecos*0.2f; }
        int pushing = wsad[0] || wsad[1] || wsad[2] || wsad[3];
        float acceleration = pushing ? 0.4 : 0.2;

        player.velocity.x = player.velocity.x * (1-acceleration) + move_vec[0] * acceleration;
        player.velocity.y = player.velocity.y * (1-acceleration) + move_vec[1] * acceleration;

        if(pushing) moving = 1;

        SDL_Delay(10);
    }
}


void vst(char const name[])
{
    Player player = {0};
    z__auto sectors = data_load(&player);

    surface = SDL_SetVideoMode(WINDOW_X, WINDOW_Y, 32, 0);

    SDL_EnableKeyRepeat(150, 30);
    SDL_ShowCursor(SDL_DISABLE);

    render_start(&sectors);

    main_loop(player, &sectors);

    render_close();
    data_delete(sectors);

    SDL_Quit();
}

int main(int argc, char *argv[])
{
    vst(NULL);
    return 1;
}


#endif
